From: Michael John Sakellaropoulos <mjsakellaropoulos@gmail.com>
Date: Mon, 3 May 2021 23:08:04 -0400
Subject: [PATCH] Report MAX_X and MAX_Y on ili210x input device

Temporary patch to get panel information and define resolution of ili210x
touchscreen.

---
edit by Hansem Ro:
- Removed changes to .gitignore
- Remove changes to omap4-kc1-dss.dtsi
- Remove debug error print
- Minor format changes to code

Original commit:
https://github.com/mj-sakellaropoulos/linux-omap4-kc1/commit/b0c4503fadd3a0a3f7569f7bf56a47d3a1c5e8e3

---
 drivers/input/touchscreen/ili210x.c | 33 +++++++++++++++++++++++++++--
 1 file changed, 31 insertions(+), 2 deletions(-)

diff --git a/drivers/input/touchscreen/ili210x.c b/drivers/input/touchscreen/ili210x.c
index d8fccf048bf4..ff26c2872521 100644
--- a/drivers/input/touchscreen/ili210x.c
+++ b/drivers/input/touchscreen/ili210x.c
@@ -82,6 +82,26 @@ static int ili210x_read_touch_data(struct i2c_client *client, u8 *data)
 				data, ILI210X_DATA_SIZE);
 }
 
+static int ili210x_read_panel_info(struct i2c_client *client, u8 *data)
+{
+	return ili210x_read_reg(client, REG_PANEL_INFO, data, ILI210X_DATA_SIZE);
+}
+
+static bool ili210x_get_resolution(struct i2c_client *client, unsigned int *x_max, unsigned int *y_max)
+{
+	u8 data[ILI210X_DATA_SIZE] = { 0 };
+	int ret = ili210x_read_panel_info(client, data);
+
+	if (ret != 0) {
+		return false;
+	}
+
+	*x_max = get_unaligned_le16(data);
+	*y_max = get_unaligned_le16(data + 2);
+
+	return true;
+}
+
 static bool ili210x_touchdata_to_coords(const u8 *touchdata,
 					unsigned int finger,
 					unsigned int *x, unsigned int *y,
@@ -394,6 +414,9 @@ static int ili210x_i2c_probe(struct i2c_client *client,
 	struct input_dev *input;
 	int error;
 	unsigned int max_xy;
+	unsigned int x_max;
+	unsigned int y_max;
+	bool res_success;
 
 	dev_dbg(dev, "Probing for ILI210X I2C Touschreen driver");
 
@@ -445,8 +468,14 @@ static int ili210x_i2c_probe(struct i2c_client *client,
 
 	/* Multi touch */
 	max_xy = (chip->resolution ?: SZ_64K) - 1;
-	input_set_abs_params(input, ABS_MT_POSITION_X, 0, max_xy, 0, 0);
-	input_set_abs_params(input, ABS_MT_POSITION_Y, 0, max_xy, 0, 0);
+	res_success = ili210x_get_resolution(client, &x_max, &y_max);
+	if (res_success) {
+		input_set_abs_params(input, ABS_MT_POSITION_X, 0, x_max, 0, 0);
+		input_set_abs_params(input, ABS_MT_POSITION_Y, 0, y_max, 0, 0);
+	} else {
+		input_set_abs_params(input, ABS_MT_POSITION_X, 0, max_xy, 0, 0);
+		input_set_abs_params(input, ABS_MT_POSITION_Y, 0, max_xy, 0, 0);
+	}
 	if (priv->chip->has_pressure_reg)
 		input_set_abs_params(input, ABS_MT_PRESSURE, 0, 0xa, 0, 0);
 	touchscreen_parse_properties(input, true, &priv->prop);
-- 
2.31.1

